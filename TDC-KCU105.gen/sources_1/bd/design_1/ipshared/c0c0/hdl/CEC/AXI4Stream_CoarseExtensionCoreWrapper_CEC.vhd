-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
--                                                                                                                     --
--  __/\\\\\\\\\\\\\\\__/\\\\\\\\\\\\\\\__/\\\\\\\\\\\\_____/\\\\\\\\\\\__/\\\\\\\\\\\\\\\__/\\\_____________          --
--   _\///////\\\/////__\/\\\///////////__\/\\\////////\\\__\/////\\\///__\/\\\///////////__\/\\\_____________         --
--    _______\/\\\_______\/\\\_____________\/\\\______\//\\\_____\/\\\_____\/\\\_____________\/\\\_____________        --
--     _______\/\\\_______\/\\\\\\\\\\\_____\/\\\_______\/\\\_____\/\\\_____\/\\\\\\\\\\\_____\/\\\_____________       --
--      _______\/\\\_______\/\\\///////______\/\\\_______\/\\\_____\/\\\_____\/\\\///////______\/\\\_____________      --
--       _______\/\\\_______\/\\\_____________\/\\\_______\/\\\_____\/\\\_____\/\\\_____________\/\\\_____________     --
--        _______\/\\\_______\/\\\_____________\/\\\_______/\\\______\/\\\_____\/\\\_____________\/\\\_____________	   --
--         _______\/\\\_______\/\\\\\\\\\\\\\\\_\/\\\\\\\\\\\\/____/\\\\\\\\\\\_\/\\\\\\\\\\\\\\\_\/\\\\\\\\\\\\\\\_   --
--          _______\///________\///////////////__\////////////_____\///////////__\///////////////__\///////////////__  --
--                                                                                                                     --
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------


--------------------------BRIEF MODULE DESCRIPTION -----------------------------
--! \file
--! \brief This is the wrapping of CoarseExtensionCore for AXI4-Stream interface for HDL.
--------------------------------------------------------------------------------



----------------------------- LIBRARY DECLARATION ------------------------------

------------ IEEE LIBRARY -----------
--! Standard IEEE library
library IEEE;
	--! Standard Logic Vector library
	use IEEE.STD_LOGIC_1164.all;
	--! Numeric library
	use IEEE.NUMERIC_STD.ALL;
--	--! Math operation over real number (not for implementation)
--	--use IEEE.MATH_REAL.all;
------------------------------------

-- ------------ STD LIBRARY -----------
-- --! Standard
-- library STD;
-- 	--! Textual Input/Output (only in simulation)
-- 	use STD.textio.all;
-- ------------------------------------


-- ---------- XILINX LIBRARY ----------
-- --! Xilinx Unisim library
-- library UNISIM;
-- 	--! Xilinx Unisim VComponent library
-- 	use UNISIM.VComponents.all;
--
-- --! \brief Xilinx Parametric Macro library
-- --! \details To be correctly used in Vivado write auto_detect_xpm into tcl console.
-- library xpm;
-- 	--! Xilinx Parametric Macro VComponent library
-- 	use xpm.vcomponents.all;
-- ------------------------------------


------------ LOCAL LIBRARY ---------
--! Internal Library
library work;
	--! CoarseExtensionCore Local Package
	use work.LocalPackage_CEC.all;
	--! TreeComparator Local Package
	use work.LocalPackage_TC.all;
------------------------------------

--------------------------------------------------------------------------------


-----------------------------ENTITY DESCRIPTION --------------------------------
--! \brief The output of this module contains *m00_axis_uncalib_tvalid*, that comes from the *CoarseExtensionCore* and goes high if an overflow is detected, and *m00_axis_uncalib_tdata* that is composed by
--! the FID part (with dimension *BIT_FID*) + coarse part (with dimension *BIT_COARSE*) + fine part (with dimension *BIT_UNCALIBRATED*). In input we have the subinterpolated data (*s00_axis_subint_tdata*) with dimension of *BIT_SUB_INT*, and the valid (*s00_axis_subint_tvalid*)
--! coming from the decoder. Moreover we have in input the *CoarseCounter_CTD*, that is used in case of *CEC_VS_CTD_COUNTER = "CTD"*.
--------------------------------------------------------------------------------
entity AXI4Stream_CoarseExtensionCoreWrapper_CEC is
	generic (

		----------------  Coarse Counter --------------
		CEC_VS_CTD_COUNTER	:	STRING						:= "CEC";			--! If *CEC* we choose the coarse counter generated by the internal CoarseExtensionCore, if *CTD* we choose the coarse counter caming from the external CoarseTreeDistributor

		CEC_COARSE_CNT_INIT	:	NATURAL						:= 0;				--! Initialization Value of the Internal Coarse Counter in CoarseExtensionCore
		BIT_COARSE			:	POSITIVE	RANGE 1 TO 32	:= 8;				--! Bit Dimension of the Coarse part of the Timestamp

		INTERNAL_OVERFLOW_CNT	:	BOOLEAN		:=	FALSE;						--! Generic used for deciding whether to count the overflows in the CEC (if *INTERNAL_OVERFLOW_CNT* is TRUE) or leave the Overfow Counter the task of counting (if *INTERNAL_OVERFLOW_CNT* is FALSE)
		----------------------------------------------

		------------- Uncalibrated Dimension --------
		----- Uncalibrated -----
		BIT_SUB_INT			:	POSITIVE	RANGE	2	TO	16	:=	10;			--! Number of Bit of SubInterpolated TDL
		BIT_UNCALIBRATED	:	POSITIVE	RANGE	2	TO	16	:=	10;			--! Number of Bit of Uncalibrated_TDL (Default, Equal to BIT_SUB_INT)
		------------------------

		-------- BeltBus -------
		BIT_FID					:	NATURAL 	:=	1;							--! Function ID of the Belt Bus, if bit0 of *FID* =0 we have an OVERFLOW , if = 1 we MEASURE. If BIT_FID = 1 the belt bus is removed and it is a standard AXI4 stream, the MSBs of BIT_FID are used for aditional (e.g. polarity)
		------------------------
		----------------------------------------------

		--------------- xpm_fifo_async ---------------
		FIFO_MEMORY_TYPE	:	STRING							:=	"distributed";      		--! Type of FIFO; "auto", "block", or "distributed";
		RELATED_CLOCKS		:	BOOLEAN							:=	FALSE;						--! Specifies if the wr_clk (s00_uncalibTDC_aclk) and rd_clk (m00_uncalibSYS_aclk) are related, if 1 clk_TDC and clk_SYS are locked
		FIFO_WRITE_DEPTH	:	INTEGER	RANGE	16	TO	4194304	:=	16;           				--! FIFO Depth, Power of 2
		CDC_SYNC_STAGES		:	INTEGER	RANGE	2	TO	8		:=	4;							--! Cross Domain Clock Synch Stages: specifies the number of synchronization stages on the CDC path. It must be < 5 if *FIFO_WRITE_DEPTH = 16*
		----------------------------------------------

		--------------  Tree Comparator --------------

		------ Stage 0 -----
		MAX_NUM_BIT_EQ_PIPELINE_STAGE0		: 	POSITIVE 	RANGE 1 TO 32   := 3;				--! Blocks of bits of the inputs that we want to compare in the first stage (Equality comparison)
		--------------------

		-- Others Stages ---
		MAX_INPUT_ENGINE_PIPELINE	:	TC_POSITIVE_ARRAY_TYPE := (2, 2)		--! Select the max number of input per stage, the EQ stage must have 2 inputs
		--------------------
		----------------------------------------------
	);

	port(
		------------------ Reset/Clock ---------------
		--------- Reset --------
		reset_SYS   :	IN    STD_LOGIC;																		--! Asynchronous system reset active high
		reset_TDC	:	IN    STD_LOGIC;																		--! Asynchronous TDC reset active high
		------------------------

		--------- Clocks -------
		clk_TDC     :	IN    STD_LOGIC;		 																--! Sampling clock at clk_TDC. It is the TDC clock before the synchronizer
		clk_SYS     :	IN    STD_LOGIC;		 																--! Sampling clock at clk_SYS. It is the system clock after the synchronizer
		------------------------
		----------------------------------------------
		----------------------------------------------

		--- CTD External Coarse Count (CNT) Value ----
		CoarseCounter_CTD	:	IN	STD_LOGIC_VECTOR(BIT_COARSE-1 downto 0);												--! Value of the External Coarse Counter coming from CTD
		---------------------------------------------

		-------------------- Data ------------------
		-----  Decoded TDL ----
		s00_axis_subint_tvalid	: IN	STD_LOGIC;																				--! Valid of the SubInterpolated TDL
		s00_axis_subint_tdata	: IN	STD_LOGIC_VECTOR(1 + BIT_SUB_INT-1 downto 0);											--! Polarity + Decoded Subinterpolated TDL (Default, Equal to BIT_UNCALIBRATED)
		------------------------

		---  Uncalibrated TDL --
		m00_axis_uncalib_tvalid	: OUT	STD_LOGIC;																				--! Valid of Decoded of TDL with pipeline of Coarse Counter
		m00_axis_uncalib_tdata	: OUT	STD_LOGIC_VECTOR(BIT_FID + BIT_COARSE + BIT_UNCALIBRATED-1 downto 0)					--! Data from Coarse Counter pipelined | Decoded of TDLs sub-interpolated => |COARSE|SUB_INT|
		------------------------
		-------------------------------------------

	);

end AXI4Stream_CoarseExtensionCoreWrapper_CEC;

------------------------ ARCHITECTURE DESCRIPTION ------------------------------
--! \brief The AXI4Stream_CoarseExtensionCoreWrapper_CEC is basically the wrapper for the HDL, and instantiates the CoarseExtensionCore. Futhermore it contains the function
--! *RelatedClocksConvertion* used to convert the generic *RELATED_CLOCKS* from boolean to integer.
--------------------------------------------------------------------------------

architecture Behavioral of AXI4Stream_CoarseExtensionCoreWrapper_CEC is

	-------------------------- FUNCTIONS DEFINITION ----------------------------

	--------------- Related Clock Convertion ----------------
	--! \brief The RelatedClocksConvertion function basically converts RELATED_CLOCKS from a boolean type into an
	--! integer type

	function RelatedClocksConvertion(
		related_clocks_bool		:	boolean
	) return integer is

		variable	related_clocks_int	:	integer	:=	0;

	begin

		if related_clocks_bool = True then
			related_clocks_int	:=	1;

		else
			related_clocks_int	:=	0;

		end if;

		return related_clocks_int;

	end function;
	-------------------------------------------------------------



	--------------- CDC_SYNC_STAGES Value ----------------
	--! \brief The CDCSyncStagesValue function decides which value has to be
	--! assigned to the generics *CDC_SYNC_STAGES*, if *RELATED_CLOCKS* is *TRUE*
	--! *CDC_SYNC_STAGES* assumes its default value that is 2.

	function CDCSyncStagesValue(
		related_clocks_bool : boolean;
		cdc_sync_stages_in	: integer
	) return integer is

	variable cdc_sync_stages_out : integer := 2;

	begin

		if related_clocks_bool = True then
			cdc_sync_stages_out	:= 2;

		else
			cdc_sync_stages_out	:= cdc_sync_stages_in;

		end if;

		return cdc_sync_stages_out;

	end function;
	-------------------------------------------------------------

	----------------------------------------------------------------------------

	------------------------- COMPONENT DECLARATION ----------------------------


	--------------------- CoarseExtensionCore ---------------------
	--! \brief The CoarseExtensionCore appends a CoarseCount value to the input data (subint) if it is valid, then by means of the synchronizer it changes the clock domain, and it manages the overflow internally.

	COMPONENT CoarseExtensionCore
		generic (

			----------------  Coarse Counter --------------
			CEC_VS_CTD_COUNTER	:	STRING						:= "CEC";			-- CEC coarse counter generated by the internal CoarseExtensionCore, CTD coarse counter came from external CoarseTreeDistributor

			CEC_COARSE_CNT_INIT	:	NATURAL						:= 0;				-- Initialization Value of the Internal Coarse Counter in CoarseExtensionCore
			BIT_COARSE			:	POSITIVE	RANGE 1 TO 32	:= 8;				-- Bit of Coarse Counter

			INTERNAL_OVERFLOW_CNT	:	BOOLEAN		:=	FALSE;						-- Generic used for deciding whether to count the overflows in the CEC (if *INTERNAL_OVERFLOW_CNT* is TRUE) or leave the Overfow Counter the task of counting (if *INTERNAL_OVERFLOW_CNT* is FALSE)
			----------------------------------------------


			------------- Uncalibrated Dimension --------
			----- Uncalibrated -----
			BIT_SUB_INT			:	POSITIVE	RANGE	2	TO	16	:=	10;			-- Number of Bit of SubInterpolated TDL
			BIT_UNCALIBRATED	:	POSITIVE	RANGE	2	TO	16	:=	10;			-- Number of Bit of Uncalibrated_TDL (Default, Equal to BIT_SUB_INT)
			------------------------

			-------- BeltBus -------
			BIT_FID					:	NATURAL 	:=	1;							-- Function ID of the Belt Bus, 0 = OVERFLOW Coarse, 1 = MEASURE, If BIT_FID = 0 the belt bus is removed and it is a standard axi4 stream
			------------------------
			-----------------------------------------------

			--------------- xpm_fifo_async ---------------
			FIFO_MEMORY_TYPE	:	STRING							:=	"distributed";      		-- Type of FIFO; "auto", "block", or "distributed";
			RELATED_CLOCKS		:	INTEGER	RANGE	0	TO	1		:=	0;									-- If 1 clk_TDC and clk_SYS are locked
			FIFO_WRITE_DEPTH	:	INTEGER	RANGE	16	TO	4194304	:=	16;           -- FIFO Depth, Power of 2
			CDC_SYNC_STAGES		:	INTEGER	RANGE	2	TO	8		:=	4;										-- Cross Domain Clock Synch Stages
			----------------------------------------------

			--------------  Tree Comparator --------------

			------ Stage 0 -----
			MAX_NUM_BIT_EQ_PIPELINE_STAGE0		: 	POSITIVE 	RANGE 1 TO 32   := 3;				-- Blocks of bits of the inputs that we want to compare in the first stage (Equality comparison)
			--------------------

			-- Others Stages ---
			MAX_INPUT_ENGINE_PIPELINE	:	TC_POSITIVE_ARRAY_TYPE := (2, 2)		-- Select the max number of input per stage, the EQ stage must have 2 inputs
			--------------------
			----------------------------------------------

		);
		port(
			------------------ Reset/Clock ---------------
			--------- Reset --------
			reset_SYS   :	IN    STD_LOGIC;																		-- Asynchronous system reset active high
			reset_TDC	:	IN    STD_LOGIC;																		-- Asynchronous TDC reset active high
			------------------------

			--------- Clocks -------
			clk_TDC     :	IN    STD_LOGIC;		 																-- Sampling clock at clk_TDC. It is the TDC clock before the synchronizer
			clk_SYS     :	IN    STD_LOGIC;		 																-- Sampling clock at clk_SYS. It is the system clock after the synchronizer
			------------------------
			----------------------------------------------
			----------------------------------------------

			--- CTD External Coarse Count (CNT) Value ----
			CoarseCounter_CTD	:	IN	STD_LOGIC_VECTOR(BIT_COARSE-1 downto 0);								-- Value of the External Coarse Counter come from CTD
			---------------------------------------------

			-------------------- Data ------------------
			-----  Decoded TDL ----
			subint_tvalid	: IN	STD_LOGIC;																	-- Valid of the SubInterpolated TDL
			subint_tdata	: IN	STD_LOGIC_VECTOR(1 + BIT_SUB_INT-1 downto 0);								-- Polarity + Decoded Subinterpolated TDL (Default, Equal to BIT_UNCALIBRATED)
			------------------------

			---  Uncalibrated TDL --
			uncalib_tvalid	: OUT	STD_LOGIC;																	-- Valid of Decoded of TDL with pipeline of Coarse Counter
			uncalib_tdata	: OUT	STD_LOGIC_VECTOR(BIT_FID + BIT_COARSE + BIT_UNCALIBRATED-1 downto 0)		-- Data from Coarse Counter pipelined | Decoded of TDLs sub-interpolated => |COARSE|SUB_INT|
			------------------------
			-------------------------------------------


		);
	END COMPONENT;


begin


	------------------------ COMPONENT INSTANTIATION ---------------------------


	---------- CoarseExtensionCore -----------
	--! \brief Basically the CoarseExtensionCore sends the signals
	--! that it generates to the AXI4Stream_CoarseExtensionCoreWrapper_CEC.
	--! The two modules have the same generics and same ports.

	Inst_CoarseExtensionCore : CoarseExtensionCore
		GENERIC MAP (

			----------------  Coarse Counter --------------
			CEC_VS_CTD_COUNTER		=> CEC_VS_CTD_COUNTER,
			CEC_COARSE_CNT_INIT 	=> CEC_COARSE_CNT_INIT,
			BIT_COARSE				=> BIT_COARSE,
			INTERNAL_OVERFLOW_CNT	=> INTERNAL_OVERFLOW_CNT,
			----------------------------------------------

			------------- Uncalibrated Dimension --------
			----- Uncalibrated -----
			BIT_SUB_INT				=> BIT_SUB_INT,
			BIT_UNCALIBRATED		=> BIT_UNCALIBRATED,
			------------------------

			-------- BeltBus -------
			BIT_FID					=> BIT_FID,
			------------------------
			----------------------------------------------

			--------------- xpm_fifo_async ---------------
			FIFO_MEMORY_TYPE	=>	FIFO_MEMORY_TYPE,
			RELATED_CLOCKS		=>	RelatedClocksConvertion(RELATED_CLOCKS),
			FIFO_WRITE_DEPTH	=>	FIFO_WRITE_DEPTH,
			CDC_SYNC_STAGES		=>	CDCSyncStagesValue(RELATED_CLOCKS, CDC_SYNC_STAGES),
			----------------------------------------------

			-------------  Tree Comparator --------------

			------ Stage 0 -----
			MAX_NUM_BIT_EQ_PIPELINE_STAGE0 		=> MAX_NUM_BIT_EQ_PIPELINE_STAGE0,
			--------------------
			-- Others Stages ---
			MAX_INPUT_ENGINE_PIPELINE			=>	MAX_INPUT_ENGINE_PIPELINE
			--------------------

			----------------------------------------------


		)
		PORT MAP(

			------ Reset ------
			reset_TDC	=> reset_TDC,
			reset_SYS	=> reset_SYS,
			-------------------

			------ Clocks ------
			clk_TDC		=> clk_TDC,
			clk_SYS		=> clk_SYS,
			--------------------

			--- CTD External Coarse Count (CNT) Value ----
			CoarseCounter_CTD  =>  CoarseCounter_CTD,

			-------------------- Data ------------------
			-----  Decoded TDL ----
			subint_tvalid	=> s00_axis_subint_tvalid,
			subint_tdata	=> s00_axis_subint_tdata(1 + BIT_SUB_INT-1 downto 0),
			------------------------

			---  Uncalibrated TDL --
			uncalib_tvalid	=> m00_axis_uncalib_tvalid,
			uncalib_tdata   => m00_axis_uncalib_tdata(BIT_FID + BIT_COARSE + BIT_UNCALIBRATED-1 downto 0)
			------------------------
	        -------------------------------------------


		);
	---------------------------------


	------------------------------------------------------------------



end Behavioral;
